<?xml version="1.0" encoding="utf-8"?>
<modification>
  <id>ExcelPort OpenStock</id>
  <version>1.0.2</version>
  <vqmver>2.x</vqmver>
  <author>iSenseLabs Team | http://isenselabs.com</author>
  
  <file name="admin/model/module/excelport.php">
  <operation error="log">
    <search position="after"><![CDATA[/* {EXTRA_PRODUCT_FIELDS} */]]></search>   
            <add><![CDATA[
      array(
        'title' => 'Has Options',
        'column_full' => 'R',
        'column_light' => 'AN',
        'name' => 'custom_has_options',
        'select_sql' => "SELECT DISTINCT product_id, has_option as value FROM {DB_PREFIX}product",
        'select_eval' => NULL,
        'eval_add' => '',
        'eval_edit' => ''
      )
      ]]></add>
        </operation>
    <operation>
      <search position="before"><![CDATA[parent::__construct($register);]]></search>
      <add><![CDATA[$this->productSize += 7;]]></add>
    </operation>
  </file>
  <file name="admin/model/openstock/openstock.php">
  <operation>
    <search position="replace"><![CDATA[$optionValues[$v] . ' > ';]]></search>   
            <add><![CDATA[(!empty($optionValues[$v]) ? $optionValues[$v] : '') . ' > ';]]></add>
        </operation>
  </file>
  <file name="admin/model/module/excelport_product.php">
    <operation>
      <search position="after"><![CDATA[$merges = array]]></search>
      <add><![CDATA[
      $merges[] = 2;
      $merges[] = 26;
      $merges[] = 2;
      $merges[] = 32;
      ]]></add>
    </operation>
    <operation>
      <search position="before"><![CDATA[$leftColumnStaticText = array]]></search>
      <add><![CDATA[$dynamicTemplates['open_stock'] = array(4,26,4,32);]]></add>
    </operation>
    <operation>
      <search position="after"><![CDATA[$leftColumnStaticTextColumn4 = array]]></search>
      <add><![CDATA[
      $leftColumnStaticTextColumn1[] = null;
      $leftColumnStaticTextColumn1[] = null;
      $leftColumnStaticTextColumn1[] = null;
      $leftColumnStaticTextColumn1[] = null;
      $leftColumnStaticTextColumn1[] = null;
      $leftColumnStaticTextColumn1[] = null;
      $leftColumnStaticTextColumn1[] = null;
      $leftColumnStaticTextColumn2[] = null;
      $leftColumnStaticTextColumn2[] = null;
      $leftColumnStaticTextColumn2[] = null;
      $leftColumnStaticTextColumn2[] = null;
      $leftColumnStaticTextColumn2[] = null;
      $leftColumnStaticTextColumn2[] = null;
      $leftColumnStaticTextColumn2[] = null;
      $leftColumnStaticTextColumn3[] = 'Open Stock';
      $leftColumnStaticTextColumn3[] = null;
      $leftColumnStaticTextColumn3[] = null;
      $leftColumnStaticTextColumn3[] = null;
      $leftColumnStaticTextColumn3[] = null;
      $leftColumnStaticTextColumn3[] = null;
      $leftColumnStaticTextColumn3[] = null;
      $leftColumnStaticTextColumn4[] = 'Combination';
      $leftColumnStaticTextColumn4[] = 'SKU';
      $leftColumnStaticTextColumn4[] = 'Weight';
      $leftColumnStaticTextColumn4[] = 'Stock';
      $leftColumnStaticTextColumn4[] = 'Price';
      $leftColumnStaticTextColumn4[] = 'Status';
      $leftColumnStaticTextColumn4[] = 'Image';
      ]]></add>
    </operation>
    <operation>
      <search position="before"><![CDATA[if (!empty($designLayoutRange[1])) {]]></search>
      <add><![CDATA[
      
      // Open Stock
      $this->load->model('tool/image');
      $this->load->model('openstock/openstock');
      
      $productOpenStocks = $this->model_openstock_openstock->getProductOptionStocks($row['product_id']);
      $productOpenStockOptions = $this->model_catalog_product->getProductOptions($row['product_id']);
      
      $i3 = $dynamicTemplates['open_stock'][0];
      
      
      foreach ($productOpenStocks as $productOpenStock) {
        
        $var = explode(':', $productOpenStock['var']);
        $resulting_var = array();
        foreach ($var as $item) {
          if (!empty($productOpenStock['opts'][$item])) {
            $resulting_var[] = $productOpenStock['opts'][$item];
          }
        }
        
        if (!empty($resulting_var)) {       
          $productSheetObj->setCellValueExplicit(PHPExcel_Cell::stringFromColumnIndex($target[0] + $i3) . ($target[1] + $dynamicTemplates['open_stock'][1] + 0), implode('|', $resulting_var), PHPExcel_Cell_DataType::TYPE_STRING);
          
          $productSheetObj->setCellValueExplicit(PHPExcel_Cell::stringFromColumnIndex($target[0] + $i3) . ($target[1] + $dynamicTemplates['open_stock'][1] + 1), $productOpenStock['sku'], PHPExcel_Cell_DataType::TYPE_STRING);
          
          $productSheetObj->setCellValueExplicit(PHPExcel_Cell::stringFromColumnIndex($target[0] + $i3) . ($target[1] + $dynamicTemplates['open_stock'][1] + 2), $productOpenStock['weight'], PHPExcel_Cell_DataType::TYPE_STRING);
          
          $productSheetObj->setCellValueExplicit(PHPExcel_Cell::stringFromColumnIndex($target[0] + $i3) . ($target[1] + $dynamicTemplates['open_stock'][1] + 3), $productOpenStock['stock'], PHPExcel_Cell_DataType::TYPE_STRING);
          
          $productSheetObj->setCellValueExplicit(PHPExcel_Cell::stringFromColumnIndex($target[0] + $i3) . ($target[1] + $dynamicTemplates['open_stock'][1] + 4), $productOpenStock['price'], PHPExcel_Cell_DataType::TYPE_STRING);
          
          $productSheetObj->setCellValueExplicit(PHPExcel_Cell::stringFromColumnIndex($target[0] + $i3) . ($target[1] + $dynamicTemplates['open_stock'][1] + 5), !empty($productOpenStock['active']) ? 'Enabled' : 'Disabled', PHPExcel_Cell_DataType::TYPE_STRING);
          
          $productSheetObj->setCellValueExplicit(PHPExcel_Cell::stringFromColumnIndex($target[0] + $i3) . ($target[1] + $dynamicTemplates['open_stock'][1] + 6), $productOpenStock['image'], PHPExcel_Cell_DataType::TYPE_STRING);

          $i3++;
        }
      }
      
      
      ]]></add>
    </operation>
    <operation>
      <search position="before"><![CDATA[$source = array(0,2 + $this->productSize*($progress['importedCount']));]]></search>
      <add><![CDATA[$map['product_open_stock'] = array(4,26);]]></add>
    </operation>
    <operation>
      <search position="before"><![CDATA[// Layouts (Design)]]></search>
      <add><![CDATA[
      
        // Open Stock
        $i = 0;
        $openStockCombination = $productSheetObj->getCell(PHPExcel_Cell::stringFromColumnIndex($source[0] + $map['product_open_stock'][0] + $i) . ($source[1] + $map['product_open_stock'][1]))->getValue();
        $product_open_stock = array();
        while(!empty($openStockCombination)) {
          $open_stock_price = (float)str_replace(array(' ', ','), array('', '.'), trim($productSheetObj->getCell(PHPExcel_Cell::stringFromColumnIndex($source[0] + $map['product_open_stock'][0] + $i) . ($source[1] + $map['product_open_stock'][1] + 4))->getValue()));
          
          $open_stock_sku = trim($productSheetObj->getCell(PHPExcel_Cell::stringFromColumnIndex($source[0] + $map['product_open_stock'][0] + $i) . ($source[1] + $map['product_open_stock'][1] + 1))->getValue());
          
          $open_stock_weight = (float)str_replace(array(' ', ','), array('', '.'), trim($productSheetObj->getCell(PHPExcel_Cell::stringFromColumnIndex($source[0] + $map['product_open_stock'][0] + $i) . ($source[1] + $map['product_open_stock'][1] + 2))->getValue()));
          
          $open_stock_stock = (int)trim($productSheetObj->getCell(PHPExcel_Cell::stringFromColumnIndex($source[0] + $map['product_open_stock'][0] + $i) . ($source[1] + $map['product_open_stock'][1] + 3))->getValue());
          
          $open_stock_status = trim($productSheetObj->getCell(PHPExcel_Cell::stringFromColumnIndex($source[0] + $map['product_open_stock'][0] + $i) . ($source[1] + $map['product_open_stock'][1] + 5))->getValue()) == 'Enabled' ? 1 : 0;

          $open_stock_image = trim($productSheetObj->getCell(PHPExcel_Cell::stringFromColumnIndex($source[0] + $map['product_open_stock'][0] + $i) . ($source[1] + $map['product_open_stock'][1] + 6))->getValue());

          $option_stock_values = explode('|', $openStockCombination);
          
          $product_open_stock[] = array(
            'var_texts' => $option_stock_values,
            'image' => $open_stock_image,
            'sku' => $open_stock_sku,
            'weight' => $open_stock_weight,
            'stock' => $open_stock_stock,
            'price' => $open_stock_price,
            'subtract' => 1,
            'active' => $open_stock_status
          );
          
          $i++;
          $openStockCombination = $productSheetObj->getCell(PHPExcel_Cell::stringFromColumnIndex($source[0] + $map['product_open_stock'][0] + $i) . ($source[1] + $map['product_open_stock'][1]))->getValue();
        }
        
      ]]></add>
    </operation>
    <operation>
      <search position="after"><![CDATA['product_image' => $product_image,]]></search>
      <add><![CDATA['product_open_stock' => $product_open_stock,]]></add>
    </operation>
    
    <operation>
                <search position="before"><![CDATA[if (isset($data['product_option'])) {]]></search>
                <add><![CDATA[ if (!empty($data['custom_has_options'])) ]]></add>
        </operation>
        <operation>
                <search position="before"><![CDATA[if (isset($data['product_discount'])) {]]></search>
                <add><![CDATA[
          if (!empty($data['custom_has_options']) && !empty($data['product_open_stock'])) {
            $this->db->query("DELETE FROM `" . DB_PREFIX . "product_option_relation` WHERE `product_id`= '" . (int)$product_id. "'");
            $this->db->query("DELETE FROM `" . DB_PREFIX . "product_option_relation_group_price` WHERE `product_id`= '" . (int)$product_id. "'");
            $this->db->query("DELETE FROM `" . DB_PREFIX . "product_option_relation_discount_price` WHERE `product_id`= '" . (int)$product_id. "'");
          
            $language_keys = array_keys($data['product_description']);
            $product_option_value_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "product_option_value pov LEFT JOIN " . DB_PREFIX . "option_value_description ovd ON (pov.option_value_id = ovd.option_value_id AND ovd.language_id='" . $language_keys[0] . "') WHERE pov.product_id = '" . (int)$product_id . "'");
            
            $this->load->model('openstock/openstock');
            $openstock_combinations = $this->model_openstock_openstock->calcOptions($product_id);
            
            $option_value_ids = array();
            $combinations = array();
            
            foreach ($openstock_combinations as $openstock_combination) {
              $combinations[] = explode(':', $openstock_combination);
            }
            
            foreach ($product_option_value_query->rows as $row) {
              $option_value_ids[] = array(
                'id' => $row['product_option_value_id'],
                'name' => $row['name']
              );
            }
            
            foreach ($combinations as $combination) {
              sort($combination);
              
              // Determine whether this combination exists
              $stock_data = array(
                'product_id' => $product_id,
                'var' => implode(':', $combination),
                'sku' => '',
                'stock' => '',
                'active' => '',
                'subtract' => '',
                'price' => '',
                'image' => '',
                'weight' => ''
              );
              
              $combination_names = array();
              $combination_length = count($combination);
              foreach ($combination as $combination_value) {
                foreach ($option_value_ids as $option_value_id) {
                  if ($combination_value == $option_value_id['id']) {
                    $combination_names[] = $option_value_id['name'];
                    $combination_length--;
                  }
                }
              }
              
              if (!$combination_length) { // If all combination indices have names
                $found = false;
                $stock_index = false;
                
                foreach ($data['product_open_stock'] as $i => $open_stock) {
                  $found = true;
                  foreach ($combination_names as $combination_name) {
                    $found = $found && in_array($combination_name, $open_stock['var_texts']);
                  }
                  if ($found) {
                    $stock_index = $i;
                    break;
                  }
                }
                
                if ($found && $stock_index !== false) {
                  $stock_data['sku'] = $data['product_open_stock'][$stock_index]['sku'];
                  $stock_data['stock'] = $data['product_open_stock'][$stock_index]['stock'];
                  $stock_data['active'] = $data['product_open_stock'][$stock_index]['active'];
                  $stock_data['subtract'] = $data['product_open_stock'][$stock_index]['subtract'];
                  $stock_data['price'] = $data['product_open_stock'][$stock_index]['price'];
                  $stock_data['image'] = $data['product_open_stock'][$stock_index]['image'];
                  $stock_data['weight'] = $data['product_open_stock'][$stock_index]['weight'];
                }
              }
              
              $this->db->query("
                INSERT INTO " . DB_PREFIX . "product_option_relation
                SET
                  `product_id`    = '" . $stock_data['product_id'] . "',
                  `var`           = '" . $stock_data['var'] . "',
                  `sku`           = '" . $stock_data['sku'] . "',
                  `stock`         = '" . $stock_data['stock'] . "',
                  `active`        = '" . $stock_data['active'] . "',
                  `subtract`      = '" . $stock_data['subtract'] . "',
                  `price`         = '" . $stock_data['price'] . "',
                  `image`         = '" . $stock_data['image'] . "',
                  `weight`        = '" . $stock_data['weight'] . "'
              ");
              
              unset($stock_data);
            }
          }
        ]]></add>
        </operation>
    <operation>
                <search position="replace"><![CDATA[model = '" . $this->db->escape($data['model']) . "', sku = '" . $this->db->escape($data['sku']) . "', ]]></search>
                <add><![CDATA[model = '" . $this->db->escape($data['model']) . "', sku = '" . $this->db->escape($data['sku']) . "', has_option = '" . (int)$this->db->escape($data['custom_has_options']) . "', ]]></add>
        </operation>
  </file>
  
</modification>